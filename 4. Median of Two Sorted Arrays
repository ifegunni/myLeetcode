There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5





def findMedianOfSortedArray(a, b):
    if not isGreater(a, b):
        return findMedianOfSortedArray(b, a)
    else:
        n, m = isGreater(a, b)

    start = 0
    end = n
    flag = False
    while not flag:
    # while start <= end:
        i = (end + start) // 2
        j = ((n+m+1)//2) - i

        if i > 0 and j < m and  a[i-1] > b[j]:
            start = i-1

        if i < n and j > 0 and b[j -1] > a[i]:
            start = i + 1

        else:
            if i == 0:
                median = b[j-1]
                flag = True
            elif j == 0:
                median = a[i-1]
                flag = True

            else:
                median = max(a[i-1], b[j-1])
                flag = True

    if (n + m)%2 == 1:
        return median

    if i == n:
        return ((median + b[j])/2)

    if j == m:
        return ((median + a[i])/2)
    return((median + min(a[i], b[j])) / 2.0)

def isGreater(array1, array2):
    n = len(array1)
    m = len(array2)
    if n >= m:
        return n, m
    else:
        return False

def test():
    # nums1 = [1, 3]
    # nums2 = [2]
    # median = 2.0


    nums1 = []
    nums2 = [1]
    median = 2.5

    # num1 = [1,4,7,9]
    # num2 = [3,6,7,11]
    # median = 6.5
    x = findMedianOfSortedArray(nums1, nums2)
    print(x)
    return x == median

print(test())
