You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = cur = ListNode(0)
        carry = 0
        while l1 or l2 or carry:
            if l1:
                carry += l1.val
                l1 = l1.next
            
            if l2:
                carry += l2.val
                l2 = l2.next
            cur.next = ListNode(carry%10)
            cur = cur.next
            carry = carry // 10
        
        return dummy.next
        
        
**************************************************************
#:: faster approach

def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        first =  l1
        carry = 0 
        
        while True:
            val = l1.val + l2.val + carry
            carry = val// 10
            remainder = val % 10
            l1.val = remainder
            
            if not l1.next or not l2.next:
                break
            
            l1 = l1.next
            l2 = l2.next
        
        
        if l2.next:
            l1.next = l2.next
            
        if l1.next:
            l1 = l1.next
            
            while carry > 0:
                val = l1.val + carry
                carry = val// 10
                remainder = val % 10
                l1.val = remainder

                if not l1.next:
                    break

                l1 = l1.next
        
        if carry > 0:
            l1.next = ListNode(carry)
    
        return first
            
