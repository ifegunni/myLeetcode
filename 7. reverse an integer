Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’231,  231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

#:: My solution:
class Solution:
    def reverse(self, x: int) -> int:
        result = 0
        remaining = (x * -1) if x < 0 else x
        while remaining != 0:
            result *= 10
            result += remaining % 10
            remaining //= 10
        result = result if x>0 else result * -1
        return result if -2**31 <= result <= 2**31 -1 else 0


#:: best solution on leetcode
class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        if x>0:
            temp=str(x)[::-1]
            temp=int(temp)
            if temp>0 and temp<= 2147483647:
                return temp
            else:
                return 0
        else:
            temp=str(abs(x))[::-1]
            temp=-1*int(temp)
            if temp>= -2147483648: 
                return temp
        
            else:
                return 0
