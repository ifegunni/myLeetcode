Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

#:: O(n) time complexity
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        seen = {}
        max_lenght = 0
        start = 0
        for end in range(len(s)):
            if s[end] in seen:
                start = max(start, seen[s[end]]+1)
            seen[s[end]] = end
            max_lenght = max(max_lenght, end - start +1 )
        return max_lenght
        
**********************************************************
#:: brute force approach
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        max_lenght = 0
        for i in range(len(s)):
            max_lenght = max(max_lenght, self.helper(s, i))
        return max_lenght
    
    def helper(self, s, start):
        seen = set()
        for i in range(start, len(s)):
            if s[i] not in seen:
                seen.add(s[i])
            else:
                return i - start
        return len(s) - start
                
                
